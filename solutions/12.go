/*
    The sequence of triangle numbers is generated by adding the natural 
    numbers. So the 7th triangle number would be 
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred 
    divisors?
*/

// Just brute forces factors.  There's probably a clever algorithm to determine
// number of factors, but this finishes in under half a second

package eulergo

import (
	"fmt"
    "math"
)

// Iterator that spits out triangle numbers
func triangleNumbers() func() uint64 {
    n := uint64(0)
    sum := uint64(0)
    return func() uint64 {
        n++
        sum += n
        return sum
    }
}

func Solution12() {
    gen := triangleNumbers()
    for {
        val := gen()
        root := uint64(math.Sqrt(float64(val)))
        factors := 0
        for i := uint64(1); i <=root; i++ {
            if val % i == 0 {
                if val/i == i {
                    factors++;
                } else {
                    factors += 2
                }
            }
        }
        if factors > 500 {
            fmt.Println(val)
            break
        }
    }
}
